{"version":3,"sources":["small_profile_photo.jpeg","linkedin2.svg","github.svg","App.js","AboutMe.js","Projects.js","Contact.js","routes.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","profile_photo","alt","width","to","id","href","linkedin","github","props","Routes","exact","path","component","withRouter","AboutMe","Contact","Projects","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mRC4D5BC,MArDf,WACE,OACE,yBAAKC,UAAU,OAIb,4BAAQA,UAAU,cAChB,yBACEA,UAAW,gBACXC,IAAKC,IACLC,IAAK,GACLC,MAAO,MAET,yBAAKJ,UAAW,QACd,wFACA,yBAAKA,UAAW,aACd,kBAAC,IAAD,CAAMK,GAAG,UACP,wBAAIL,UAAW,SAAf,aACM,IACR,iCACA,kBAAC,IAAD,CAAMK,GAAG,aACP,wBAAIL,UAAW,SAAf,aACM,IACR,iCACA,kBAAC,IAAD,CAAMK,GAAG,YACP,wBAAIL,UAAW,SAAf,aAGJ,yBAAKM,GAAI,SACP,uBAAGC,KAAK,+CACN,yBACEP,UAAW,OACXM,GAAI,WACJL,IAAKO,IACLL,IAAK,MAGT,uBAAGI,KAAK,8BACN,yBACEP,UAAW,OACXM,GAAI,SACJL,IAAKQ,IACLN,IAAK,GACLC,MAAO,WChDR,WAAAM,GACb,OACE,6BACE,2DCHS,WAAAA,GACb,OACE,6BACE,6ECHS,WAAAA,GACb,OACE,6BACE,0DCGeC,E,8NAMjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,YAAWhB,KAC5C,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,UAAWC,YAAWC,KACjD,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,WAAWC,UAAWC,YAAWE,KACnD,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,YAAYC,UAAWC,YAAWG,U,GAXxBC,aCIhBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f0a84a19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/small_profile_photo.1fb82000.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin2.9a894325.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.4b68bf6c.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport profile_photo from \"./small_profile_photo.jpeg\";\nimport linkedin from \"./linkedin2.svg\";\nimport github from \"./github.svg\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <nav className=\"navbar\">\n        <p>This is the nav bar</p>\n      </nav> */}\n      <header className=\"App-header\">\n        <img\n          className={\"profile_photo\"}\n          src={profile_photo}\n          alt={\"\"}\n          width={350}\n        ></img>\n        <div className={\"text\"}>\n          <h3>Hi! I'm Larissa Kobetz, a full stack software developer.</h3>\n          <div className={\"all_pages\"}>\n            <Link to=\"/about\">\n              <h5 className={\"pages\"}>About Me</h5>\n            </Link>{\" \"}\n            <h5>|</h5>\n            <Link to=\"/projects\">\n              <h5 className={\"pages\"}>Projects</h5>\n            </Link>{\" \"}\n            <h5>|</h5>\n            <Link to=\"/contact\">\n              <h5 className={\"pages\"}>Contact</h5>\n            </Link>\n          </div>\n          <div id={\"logos\"}>\n            <a href=\"https://www.linkedin.com/in/larissa-kobetz/\">\n              <img\n                className={\"logo\"}\n                id={\"linkedin\"}\n                src={linkedin}\n                alt={\"\"}\n              ></img>\n            </a>\n            <a href=\"https://github.com/lkobetz\">\n              <img\n                className={\"logo\"}\n                id={\"github\"}\n                src={github}\n                alt={\"\"}\n                width={50}\n              ></img>\n            </a>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      <h2>This is the About Me page</h2>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      <h2>The dev branch can change what is deployed!</h2>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div>\n      <h2>This is the Contact page</h2>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { withRouter, Route, Switch } from \"react-router-dom\";\n// import PropTypes from \"prop-types\";\nimport App from \"./App\";\nimport AboutMe from \"./AboutMe\";\nimport Projects from \"./Projects\";\nimport Contact from \"./Contact\";\n\nexport default class Routes extends Component {\n  componentDidMount() {\n    // this.props.loadInitialData()\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={withRouter(App)} />\n        <Route exact path=\"/about\" component={withRouter(AboutMe)} />\n        <Route exact path=\"/contact\" component={withRouter(Contact)} />\n        <Route exact path=\"/projects\" component={withRouter(Projects)} />\n      </Switch>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport Routes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <Routes />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}